from random import *
from numpy import *
boards_generation = []
scores_of_boards = []
#######################################################
"""
def mutation(board):
    for i in range(len(board)):
        f = random.uniform(0, 2)
        x1 = board[randint(0, 8)][randint(0, 8)]
        x2 = board[randint(0, 8)][randint(0, 8)]
        x3 = board[randint(0, 8)][randint(0, 8)]
        row = randint(0, 8)
        column = randint(0,8)
        MN = x1 + f*(x2-x3)
        board[row][column] = mutant_validation(MN)
        return board
"""
#######################################################
def mutation(board):#try to validate the number that u mutating,,,reemo
    f = random.uniform(0,2)
    row = randint(0, 8)
    column = randint(0, 8)
    vi = board[row][column]
    if valid(board,vi,(row,column)):
        mutation(board)

    global x1
    x1 = board[randint(0, 8)][randint(0, 8)]
    global x2
    x2 = board[randint(0, 8)][randint(0, 8)]
    global x3
    x3 = board[randint(0, 8)][randint(0, 8)]
    flag1 = False
    while (flag1 == False):
        if x1 != vi:
            flag1 = True
        else:
            x1=board[randint(0, 8)][randint(0, 8)]
    flag2 = False
    while (flag2 == False):
        if x2 != vi:
            flag2 = True
        else:
            x2 = board[randint(0, 8)][randint(0, 8)]
    flag3 = False
    while (flag3 == False):
        if x3 != vi:
            flag3 = True
        else:
            x3 = board[randint(0, 8)][randint(0, 8)]
    vi = x1 + f * (x2 - x3)
    if vi > 9 or vi < 1:
        mutation(board)
    elif valid(board,vi,(row,column)):
        board[row][column] = vi
    else:
        mutation(board)
    return board
#######################################################
#######################################################
def recomb(board):
    recombination_rate = 0.2
    x = random.random()
    if x <= recombination_rate:
        rowind1 = randint(0, 8)
        rowind2 = randint(0, 8)
        row1 = []
        row2 = []
        for i in range(0, 9):
            row1.append(board[rowind1][i])
            row2.append(board[rowind2][i])
        # cutting_index = random.randint(0, 8)
        subrow1_fp = row1[0:4]
        subrow2_fp = row2[0:4]
        subrow1_lp = row1[4:9]
        subrow2_lp = row2[4:9]
        newrow1 = subrow1_fp + subrow2_lp
        newrow2 = subrow2_fp + subrow1_lp
        board[rowind1] = newrow1
        board[rowind2] = newrow2
    return board
#######################################################
def valid(board, num, pos):
    # Check row
    for i in range(len(board[0])):
        if board[pos[0]][i] == num and pos[1] != i:
            return False
    # Check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False
    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False
    return True
#######################################################
def score_calculation(board):
    score = 0
    for i in range(0, 9):
        for j in range(0, 9):
            num = board[i][j]
            if valid(board, num, (i, j)):
                score = score + 1
    return score
#######################################################
"""def selection(boards_generation, scores_of_boards):
    max_score = max(scores_of_boards)
    index = 0
    for i in range(len(boards_generation)):
        if scores_of_boards[i] > max_score:
            max_score = scores_of_boards[i]
            index = i

    return boards_generation[index]
"""
def selection (gen_bords,gen_scores):
    Max=max(gen_scores)
    idx=gen_scores.index(Max)

    return  gen_bords[idx]
#######################################################
def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - ")

        for j in range(0, 9):
            if j % 3 == 0:
                print(" | ", end="")

            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")
#######################################################
population_size =10
iterations=20
def main(board):
    print("------------old board--------------")
    print("__V_______V__")
    print_board(board)
    print("------------new board--------------")
    print("__V_______V__")
    for i in range(iterations):
        for j in range(population_size):
            boards_generation.append(recomb(mutation(board)))
            scores_of_boards.append(score_calculation(board))
            #print_board(board)
            #print(score_calculation(board))
            #print("")
        selected_board = selection(boards_generation, scores_of_boards)
        board = selected_board

    print("score ",end="")
    Max = max(scores_of_boards)
    idx = scores_of_boards.index(Max)
    print(scores_of_boards[idx])
    print_board(boards_generation[idx])

    #for i in range(len(scores_of_boards)):
      #print(scores_of_boards[i]," ",end = "")
#######################################################

board = random.randint(1, 9, size=(9, 9))

main(board)
